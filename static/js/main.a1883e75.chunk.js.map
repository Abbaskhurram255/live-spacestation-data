{"version":3,"sources":["utils/getData/index.js","components/common/form/form.js","components/common/card/card.js","components/common/search-term/searchTerm.js","components/common/message/message.js","components/common/radio-button/radioButton.js","components/containers/search/search.js","App.js","serviceWorker.js","index.js"],"names":["getData","url","a","fetch","dataResponse","json","dataResponseJson","Form","props","onClick","value","onChange","buttonText","showInput","className","id","type","placeholder","defaultProps","PropTypes","func","Card","cardTitle","image","imageAlt","description","audio","video","key","src","alt","controls","width","poster","SearchTerm","searchTerm","Message","messageText","messageStatusClassName","RadioButton","checked","name","htmlFor","Search","useState","inputValue","setInputValue","cards","setCards","setShowInput","submitted","setSubmitted","loading","setLoading","radioButtonSelection","setRadioButtonSelection","mediaTypeURL","fetchData","rawItems","collection","items","Promise","all","map","item","data","links","href","title","nasa_id","media_type","imageLink","audioResponseJson","audioLink","videoResponseJson","mp4VideoResponse","find","includes","videoLink","card","nasaId","cardCollection","length","event","target","console","log","renderSearchResults","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1883e75.chunk.js","sourcesContent":["const getData = async (url) => {\n  let dataResponse = await fetch(url);\n  let dataResponseJson = await dataResponse.json();\n\n  return dataResponseJson;\n};\n\nexport default getData;\n","import React from 'react';\nimport PropTypes from 'prop-types'; \nimport './form.scss';\n\nconst Form = props => {\n  const { onClick, value, onChange, buttonText, showInput } = props;\n  \n  return (\n    <div className='form__container'>\n      <label>\n        {showInput && <input id='form__input' className='form__input' type=\"text\" value={value} onChange={onChange} placeholder=\"Start typing...\" />}\n      </label>\n      <button className='form__button' onClick={onClick}>\n        {buttonText} \n      </button>\n    </div>\n  );\n};\n\nForm.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  buttonText: PropTypes.string,\n  showInput: PropTypes.bool\n}\n\nForm.defaultProps = {\n  onClick: PropTypes.func,\n  value: '',\n  onChange: PropTypes.func,\n  buttonText: '',\n  showInput: false\n};\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './card.scss';\n\nconst Card = (props) => {\n  const { cardTitle, image, imageAlt, description, audio, video, key } = props;\n\n  return (\n    <div className=\"card__wrapper\" key={key}>\n      <h3>{cardTitle}</h3>\n      {image && !video && (\n        <img className=\"card__image\" src={image} alt={imageAlt} />\n      )}\n      {audio && <audio controls src={audio} />}\n      {video && (\n        <video\n          className=\"card__image\"\n          controls\n          src={video}\n          width=\"100%\"\n          type=\"video/mp4\"\n          poster={image}\n        />\n      )}\n      <p>{description}</p>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  cardTitle: PropTypes.string,\n  image: PropTypes.string,\n  imageAlt: PropTypes.string,\n  description: PropTypes.string,\n  audio: PropTypes.string,\n  video: PropTypes.string,\n  key: PropTypes.string,\n};\n\nCard.defaultProps = {\n  cardTitle: '',\n  image: '',\n  imageAlt: '',\n  description: '',\n  audio: '',\n  video: '',\n  key: '',\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types'; \n\n// import './searchTerm.scss';\n\nconst SearchTerm = props => {\n  const { searchTerm } = props;\n  \n  return (\n    <div className='searchTerm__wrapper'>\n      <p>{`Results for: ${searchTerm}`}</p>\n    </div>\n  );\n};\n\nSearchTerm.propTypes = {\n  searchTerm: PropTypes.string\n}\n\nSearchTerm.defaultProps = {\n  searchTerm: ''\n};\n\nexport default SearchTerm;\n","import React from 'react';\nimport PropTypes from 'prop-types'; \nimport './message.scss';\n\nconst Message = props => {\n  const { messageText, messageStatusClassName } = props;\n  \n  return (\n    <div className=\"message__wrapper\">\n      <p className={`message__wrapper--${messageStatusClassName}`}>{messageText}</p>\n    </div>\n  );\n};\n\nMessage.propTypes = {\n  messageText: PropTypes.string,\n  messageStatusClassName: PropTypes.oneOf(['info', 'warning', 'error'])\n}\n\nMessage.defaultProps = {\n  messageText: '',\n  messageStatusClassName: 'info'\n};\n\nexport default Message;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './radioButton.scss';\n\nconst RadioButton = (props) => {\n  const { checked, onChange } = props;\n\n  return (\n    <div className=\"radio-button__wrapper\">\n      <div className=\"radio-button__section\">\n        <input\n          className=\"radio-button__input\"\n          type=\"radio\"\n          id=\"all\"\n          name=\"mediaRadioButtons\"\n          value=\"all\"\n          checked={checked === 'all'}\n          onChange={onChange}\n        />\n        <label htmlFor=\"all\">All</label>\n      </div>\n\n      <div className=\"radio-button__section\">\n        <input\n          className=\"radio-button__input\"\n          type=\"radio\"\n          id=\"images\"\n          name=\"mediaRadioButtons\"\n          value=\"image\"\n          checked={checked === 'image'}\n          onChange={onChange}\n        />\n        <label htmlFor=\"images\">Images</label>\n      </div>\n\n      <div className=\"radio-button__section\">\n        <input\n          className=\"radio-button__input\"\n          type=\"radio\"\n          id=\"audios\"\n          name=\"mediaRadioButtons\"\n          value=\"audio\"\n          checked={checked === 'audio'}\n          onChange={onChange}\n        />\n        <label htmlFor=\"audios\">Audios</label>\n      </div>\n\n      <div className=\"radio-button__section\">\n        <input\n          className=\"radio-button__input\"\n          type=\"radio\"\n          id=\"videos\"\n          name=\"mediaRadioButtons\"\n          value=\"video\"\n          checked={checked === 'video'}\n          onChange={onChange}\n        />\n        <label htmlFor=\"videos\">Videos</label>\n      </div>\n    </div>\n  );\n};\n\nRadioButton.propTypes = {\n  checked: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nRadioButton.defaultProps = {\n  checked: 'all',\n  onChange: () => {},\n};\n\nexport default RadioButton;\n","import React, { useState } from 'react';\n\nimport getData from '../../../utils/getData';\n\nimport Form from '../../common/form/form';\nimport Card from '../../common/card/card';\nimport SearchTerm from '../../common/search-term/searchTerm';\nimport Message from '../../common/message/message';\nimport RadioButton from '../../common/radio-button/radioButton';\n\nimport './search.scss';\n\nconst nasaURL = 'https://images-api.nasa.gov/search?q=';\n\nconst Search = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [cards, setCards] = useState([]);\n  const [showInput, setShowInput] = useState(true);\n  const [submitted, setSubmitted] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [radioButtonSelection, setRadioButtonSelection] = useState('all');\n\n  const mediaTypeURL =\n    radioButtonSelection !== 'all' ? `&media_type=${radioButtonSelection}` : '';\n\n  const fetchData = async () => {\n    const dataResponseJson = await getData(nasaURL + inputValue + mediaTypeURL);\n\n    const rawItems = dataResponseJson.collection.items;\n    let cardCollection = await Promise.all(\n      rawItems.map(async (item) => {\n        const { data, links, href } = item;\n        const { title, description, nasa_id, media_type } = data[0];\n        const imageLink = links ? links[0].href : '';\n\n        let audioLink;\n        let videoLink;\n\n        if (media_type === 'audio') {\n          const audioResponseJson = await getData(href);\n          audioLink = audioResponseJson[0];\n        }\n\n        if (media_type === 'video') {\n          const videoResponseJson = await getData(href);\n          const mp4VideoResponse = videoResponseJson.find((video) =>\n            video.includes('mp4')\n          );\n          videoLink = mp4VideoResponse;\n        }\n\n        const card = {\n          title,\n          description,\n          nasaId: nasa_id,\n          imageLink,\n          audio: audioLink,\n          video: videoLink,\n        };\n        return card;\n      })\n    );\n    setLoading(false);\n    setCards(cardCollection);\n  };\n\n  const handleSubmit = () => {\n    if (inputValue) {\n      setLoading(true);\n      fetchData();\n    }\n    return setSubmitted(true);\n  };\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n    setSubmitted(false);\n  };\n\n  const handleReset = () => {\n    setCards([]);\n    setInputValue('');\n    setShowInput(true);\n    setSubmitted(false);\n    setRadioButtonSelection('all');\n  };\n\n  const handleRadioButtonChange = (event) => {\n    if (event && event.target.checked) {\n      setRadioButtonSelection(event.target.value);\n    }\n  };\n\n  const renderMessage = () => {\n    if (loading) {\n      return <Message messageText=\"Loading...\" messageStatusClassName=\"info\" />;\n    }\n    if (submitted && inputValue && cards.length === 0) {\n      return (\n        <Message\n          messageText=\"There is no results for your search, please reset your search and try again\"\n          messageStatusClassName=\"warning\"\n        />\n      );\n    }\n    if (!inputValue) {\n      return (\n        <Message\n          messageText=\"Please insert text to start searching\"\n          messageStatusClassName=\"info\"\n        />\n      );\n    }\n  };\n\n  const renderSearchResults = () => {\n    if (cards) {\n      const getCardComponent = cards.map((card) => {\n        const { imageLink, title, description, nasaId, audio, video } = card;\n        console.log('card :>> ', card);\n        return (\n          <Card\n            key={nasaId}\n            cardTitle={title}\n            image={imageLink}\n            imageAlt={title}\n            description={description}\n            audio={audio}\n            video={video}\n          />\n        );\n      });\n      return getCardComponent;\n    }\n  };\n\n  return (\n    <div className=\"search__container\">\n      <Form\n        onClick={\n          cards.length === 0 ? () => handleSubmit() : () => handleReset()\n        }\n        onChange={handleChange}\n        value={inputValue}\n        buttonText={cards.length === 0 ? 'Search' : 'Reset Search'}\n        showInput={cards.length === 0 && showInput}\n      />\n      {cards.length === 0 && (\n        <RadioButton\n          checked={radioButtonSelection}\n          onChange={handleRadioButtonChange}\n        />\n      )}\n      {renderMessage()}\n      {cards.length !== 0 && <SearchTerm searchTerm={inputValue} />}\n      <div className=\"search-results__container\">\n        {cards.length !== 0 && renderSearchResults()}\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport Search from './components/containers/search/search';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Search />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}